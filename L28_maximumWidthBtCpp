Width is the MAX num of nodes that CAN lie between two existing nodes.
While patterns give us the index of left most and right-most node at a level, overflow
will be an issue. We counter it by replacing it with 0 and reducing rightmost too. Then substracting rightmost-leftmost+1

class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if(!root)  //When tree does not exist
            return 0;
        int ans = 0;
        queue<pair<TreeNode*, int>> q; //For chossing and popping nodes => Q(P(data,index))
        q.push({root,0});
        while(!q.empty()){
            int size = q.size();
            int mmin = q.front().second;    //to make the id starting from zero
            int first,last;
            for(int i=0; i<size; i++){
                int cur_id = q.front().second-mmin;
                TreeNode* node = q.front().first;
                q.pop();
                if(i==0) first = cur_id;
                if(i==size-1) last = cur_id;
                if(node->left)
                    q.push({node->left, cur_id*2+1});
                if(node->right)
                    q.push({node->right, cur_id*2+2});
            }
            ans = max(ans, last-first+1);
        }
        return ans;
    }
};
